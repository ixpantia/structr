[{"path":"https://ixpantia.github.io/structr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 structr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"document benchmarks performance different R packages parsing JSON strings R objects. compare: structr: Parses JSON simultaneously validates predefined schema (implemented Rust using serde simd-json). jsonlite: widely used, robust JSON parser (implemented C). rjson: Another JSON parser (implemented C). RJSONIO: versatile JSON parser, often used interfacing web APIs (implemented C). goal compare parsing speed across wider range JSON structures, simple atomic values large arrays deeply nested objects.","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"benchmark-setup","dir":"Articles","previous_headings":"","what":"Benchmark Setup","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"test several scenarios representing common challenging JSON structures. structr, pre-build required structure definitions outside timed benchmark loop, reflecting typical usage (define structure , parse many times).","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"disclaimer","dir":"Articles","previous_headings":"Benchmark Setup","what":"Disclaimer","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"reading vignette GitHub Pages, benchmarks ran GitHub Actions. results differ every time run depending many factors. want true realistic benchmark, run code environment.","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"json-data-and-structr-schemas","dir":"Articles","previous_headings":"Benchmark Setup","what":"JSON Data and structr Schemas","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"schemas JSON objects defined source code document. Since values can long, hidden final output, however, fully available source code.","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"benchmarking-parameters","dir":"Articles","previous_headings":"Benchmark Setup","what":"Benchmarking Parameters","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"# Number of times to run each benchmark expression # Adjust down for slower scenarios if needed benchmark_times_fast <- 1000 benchmark_times_medium <- 500 benchmark_times_slow <- 100  # Unit for reporting timings benchmark_unit_fast <- \"us\" # microseconds benchmark_unit_medium <- \"ms\" # milliseconds benchmark_unit_slow <- \"ms\" # milliseconds"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"benchmark-results","dir":"Articles","previous_headings":"","what":"Benchmark Results","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"now run benchmarks scenario. plots show distribution execution times (lower better). Note Y-axis often logarithmic scale due potentially large performance differences. use check = \"equal\" wrap fromJSON calls try() complex cases strict equality might fail due floating point differences minor structural variations parsers, focusing instead raw speed.","code":""},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-1-simple-flat-object","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 1: Simple Flat Object","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_simple_object <- microbenchmark(   structr = structr::parse_json(json_simple_object, structr_simple_object),   jsonlite = jsonlite::fromJSON(json_simple_object, simplifyDataFrame = FALSE),   rjson = rjson::fromJSON(json_simple_object),   RJSONIO = RJSONIO::fromJSON(json_simple_object, simplify = FALSE),   times = benchmark_times_fast, unit = benchmark_unit_fast, check = \"equal\" ) print_and_plot(bm_simple_object,   title = \"Scenario 1: Simple Flat Object Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_fast, \", log scale)\") ) ## Unit: microseconds ##      expr    min      lq      mean  median     uq      max neval ##   structr  4.599  6.6625  8.818304  8.8070 10.009   30.326  1000 ##  jsonlite 41.608 48.7015 58.865015 53.6050 61.610 2948.252  1000 ##     rjson 28.092 35.3265 41.207915 40.3710 44.067  100.277  1000 ##   RJSONIO 32.991 42.3295 47.592680 46.4615 51.511  122.108  1000"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-2-simple-array-integers-50-items","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 2: Simple Array (Integers, 50 items)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_simple_array_int <- microbenchmark(   structr = structr::parse_json(json_simple_array_int, structr_simple_array_int),   jsonlite = jsonlite::fromJSON(json_simple_array_int), # simplify = TRUE default good here   rjson = rjson::fromJSON(json_simple_array_int),   RJSONIO = RJSONIO::fromJSON(json_simple_array_int), # simplify = TRUE default good here   times = benchmark_times_fast, unit = benchmark_unit_fast, check = \"equal\" )  print_and_plot(bm_simple_array_int,   title = \"Scenario 2: Simple Array (Integers) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_fast, \", log scale)\") ) ## Unit: microseconds ##      expr    min      lq      mean median      uq      max neval ##   structr  3.787  5.7505  7.310175  7.524  8.6460   27.151  1000 ##  jsonlite 32.440 37.1545 40.942777 40.606 42.9605  103.744  1000 ##     rjson 32.290 36.6385 42.037955 42.514 45.1595  106.949  1000 ##   RJSONIO 43.701 50.9755 59.330176 55.033 58.2885 3599.377  1000"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-3-simple-array-strings-26-items","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 3: Simple Array (Strings, 26 items)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_simple_array_str <- microbenchmark(   structr = structr::parse_json(json_simple_array_str, structr_simple_array_str),   jsonlite = jsonlite::fromJSON(json_simple_array_str),   rjson = rjson::fromJSON(json_simple_array_str),   RJSONIO = RJSONIO::fromJSON(json_simple_array_str),   times = benchmark_times_fast, unit = benchmark_unit_fast, check = \"equal\" )  print_and_plot(bm_simple_array_str,   title = \"Scenario 3: Simple Array (Strings) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_fast, \", log scale)\") ) ## Unit: microseconds ##      expr    min      lq      mean  median     uq      max neval ##   structr  4.128  5.9160  7.273729  7.2840  8.406   26.629  1000 ##  jsonlite 24.766 28.7785 32.278002 32.3150 34.319   84.548  1000 ##     rjson 29.495 32.5860 40.853775 37.9455 40.806 3270.633  1000 ##   RJSONIO 38.933 43.8770 49.039226 48.6250 51.967  152.244  1000"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-4-nested-object","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 4: Nested Object","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_nested_object <-   microbenchmark(     structr = structr::parse_json(json_nested_object, structr_nested_object),     jsonlite = jsonlite::fromJSON(json_nested_object, simplifyVector = FALSE),     rjson = rjson::fromJSON(json_nested_object),     RJSONIO = RJSONIO::fromJSON(json_nested_object, simplify = FALSE), # avoid matrix/df conversion     times = benchmark_times_fast, unit = benchmark_unit_fast, check = NULL # Disable check due to potential minor diffs   )  print_and_plot(bm_nested_object,   title = \"Scenario 4: Nested Object Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_fast, \", log scale)\") ) ## Unit: microseconds ##      expr    min     lq     mean  median      uq      max neval ##   structr 16.080 19.852 23.07585 23.3440 25.2270   73.707  1000 ##  jsonlite 26.389 31.484 38.61981 35.7620 38.3870 2972.737  1000 ##     rjson 41.046 47.674 54.08196 54.4565 57.8380  132.137  1000 ##   RJSONIO 52.798 60.658 66.30645 65.5375 69.1635  186.227  1000"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-5-array-of-simple-objects-100-objects","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 5: Array of Simple Objects (100 Objects)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_array_of_objects <-   microbenchmark(     structr = structr::parse_json(json_array_of_objects, structr_array_of_objects),     jsonlite = jsonlite::fromJSON(json_array_of_objects, simplifyVector = FALSE, simplifyDataFrame = FALSE), # Force list output     rjson = rjson::fromJSON(json_array_of_objects),     RJSONIO = RJSONIO::fromJSON(json_array_of_objects, simplify = FALSE), # Results in list of lists     times = benchmark_times_medium, unit = benchmark_unit_medium, check = \"equal\"   ) print_and_plot(bm_array_of_objects,   title = \"Scenario 5: Array of 100 Objects Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_medium, \", log scale)\") ) ## Unit: milliseconds ##      expr      min        lq      mean    median        uq      max neval ##   structr 0.153928 0.2023025 0.2254797 0.2157825 0.2330300 3.421405   500 ##  jsonlite 0.123892 0.1546935 0.1665400 0.1619675 0.1685290 3.368566   500 ##     rjson 0.164246 0.1795550 0.1958631 0.1987305 0.2082035 0.282157   500 ##   RJSONIO 0.250848 0.2655505 0.2834208 0.2740010 0.2854425 3.518966   500"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-6-large-array-of-simple-objects-1000-objects","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 6: Large Array of Simple Objects (1000 Objects)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_large_array_of_objects <-   microbenchmark(     structr = structr::parse_json(json_large_array_of_objects, structr_large_array_of_objects),     jsonlite = jsonlite::fromJSON(json_large_array_of_objects, simplifyVector = FALSE, simplifyDataFrame = FALSE),     rjson = rjson::fromJSON(json_large_array_of_objects),     RJSONIO = RJSONIO::fromJSON(json_large_array_of_objects, simplify = FALSE),     times = benchmark_times_medium,     unit = benchmark_unit_medium,     check = \"equal\" # Disable check   )  print_and_plot(bm_large_array_of_objects,   title = \"Scenario 6: Array of 1000 Objects Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_medium, \", log scale)\") ) ## Unit: milliseconds ##      expr      min       lq     mean   median       uq       max neval ##   structr 1.897962 2.188754 2.357311 2.259837 2.386839  7.506218   500 ##  jsonlite 1.391556 1.420641 1.523145 1.441174 1.560898  5.757764   500 ##     rjson 1.354798 1.414014 1.672150 1.448252 1.638848 10.861749   500 ##   RJSONIO 2.035759 2.169367 2.292326 2.186656 2.362760  6.683853   500"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-7-large-integer-array-10000-items","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 7: Large Integer Array (10,000 items)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_large_array_int <-   microbenchmark(     structr = structr::parse_json(json_large_array_int, structr_large_array_int),     jsonlite = jsonlite::fromJSON(json_large_array_int),     rjson = rjson::fromJSON(json_large_array_int),     RJSONIO = RJSONIO::fromJSON(json_large_array_int),     times = benchmark_times_medium,     unit = benchmark_unit_medium,     check = \"equal\"   ) print_and_plot(bm_large_array_int,   title = \"Scenario 7: Large Integer Array (10k) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_medium, \", log scale)\") ) ## Unit: milliseconds ##      expr      min       lq      mean   median        uq       max neval ##   structr 0.192329 0.198320 0.2113043 0.204266 0.2258865  0.302304   500 ##  jsonlite 2.498072 2.643724 2.8089790 2.717677 2.7938240 10.678498   500 ##     rjson 1.049078 1.068514 1.1831400 1.082460 1.1069805  4.970736   500 ##   RJSONIO 2.520524 2.556957 2.6231048 2.569069 2.5949825  7.019299   500"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-8-large-string-array-10000-items","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 8: Large String Array (10,000 items)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_large_array_str <-   microbenchmark(     structr = structr::parse_json(json_large_array_str, structr_large_array_str),     jsonlite = jsonlite::fromJSON(json_large_array_str),     rjson = rjson::fromJSON(json_large_array_str),     RJSONIO = RJSONIO::fromJSON(json_large_array_str),     times = benchmark_times_medium,     unit = benchmark_unit_medium,     check = \"equal\"   ) print_and_plot(bm_large_array_str,   title = \"Scenario 8: Large String Array (10k) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_medium, \", log scale)\") ) ## Unit: milliseconds ##      expr      min        lq      mean   median       uq       max neval ##   structr 0.679307 0.6963195 0.7175343 0.712354 0.735407  0.877358   500 ##  jsonlite 2.295213 2.3906305 2.5140479 2.465882 2.538722  6.364377   500 ##     rjson 1.347906 1.3759180 1.6466422 1.407963 1.434322 84.632965   500 ##   RJSONIO 3.428858 3.4719645 3.5874035 3.489712 3.513587  7.372968   500"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-9-deeply-nested-object-10-levels","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 9: Deeply Nested Object (10 levels)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_deep_nest <- microbenchmark(   structr = structr::parse_json(json_deep_nest, structr_deep_nest),   jsonlite = jsonlite::fromJSON(json_deep_nest, simplifyVector = FALSE, simplifyDataFrame = FALSE),   rjson = rjson::fromJSON(json_deep_nest),   RJSONIO = RJSONIO::fromJSON(json_deep_nest, simplify = FALSE),   times = benchmark_times_fast,   unit = benchmark_unit_fast,   check = \"equal\" ) print_and_plot(bm_deep_nest,   title = \"Scenario 9: Deeply Nested Object (10 Levels) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_fast, \", log scale)\") ) ## Unit: microseconds ##      expr    min      lq     mean  median      uq      max neval ##   structr 12.604 15.0180 17.21643 17.2770 18.5450   47.809  1000 ##  jsonlite 16.421 19.3915 22.38626 22.6170 24.1350   78.257  1000 ##     rjson 29.686 34.6995 43.30566 39.6595 42.4140 3837.831  1000 ##   RJSONIO 37.330 43.3205 47.95253 47.7740 50.5095  141.484  1000"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"scenario-10-wide-object-100-fields","dir":"Articles","previous_headings":"Benchmark Results","what":"Scenario 10: Wide Object (100 fields)","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"","code":"bm_wide_object <- microbenchmark(   structr = structr::parse_json(json_wide_object, structr_wide_object),   jsonlite = jsonlite::fromJSON(json_wide_object, simplifyVector = FALSE, simplifyDataFrame = FALSE),   rjson = rjson::fromJSON(json_wide_object),   RJSONIO = RJSONIO::fromJSON(json_wide_object, simplify = FALSE),   times = benchmark_times_medium,   unit = benchmark_unit_medium,   check = \"equal\" ) print_and_plot(bm_wide_object,   title = \"Scenario 10: Wide Object (100 Fields) Parsing Time\",   y_label = paste(\"Time (\", benchmark_unit_medium, \", log scale)\") ) ## Unit: milliseconds ##      expr      min        lq       mean    median        uq      max neval ##   structr 0.068377 0.0795285 0.08522201 0.0850340 0.0884100 0.137076   500 ##  jsonlite 0.038992 0.0480795 0.05267714 0.0523625 0.0551575 0.102221   500 ##     rjson 0.062938 0.0711480 0.07880645 0.0786165 0.0834915 0.173754   500 ##   RJSONIO 0.081883 0.0894370 0.09662326 0.0943310 0.1010585 0.238635   500"},{"path":"https://ixpantia.github.io/structr/articles/bench.html","id":"summary-across-scenarios","dir":"Articles","previous_headings":"","what":"Summary Across Scenarios","title":"JSON Parsing Performance Benchmark: structr vs jsonlite vs rjson vs RJSONIO","text":"Let’s combine median times scenarios visualize relative performance. convert times microseconds (us) comparison.","code":""},{"path":[]},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with structr","text":"structr package allows parse JSON strings strictly validating predefined schema structure. ensures data conforms expectations regarding data types (integer, double, string, logical), nesting (objects, arrays), required fields, optional (nullable) values. core validation logic implemented Rust performance, leveraging serde library, made available R {extendr} package. vignette provides brief overview main workflow.","code":""},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic Workflow","title":"Getting Started with structr","text":"Using structr involves three main steps: Define Schema: Use s_* functions (s_map, s_vector, s_integer, etc.) describe expected JSON structure types. results R list representing schema. Build Structure: Pass schema definition build_structure(). function validates schema definition prepares optimized internal representation parsing. Parse Validate: Use parse_json() input JSON string built structure object. JSON matches structure, returns parsed R object (typically nested lists). , throws detailed error.","code":""},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"example-1-simple-object","dir":"Articles","previous_headings":"","what":"Example 1: Simple Object","title":"Getting Started with structr","text":"Let’s define structure simple user object parse matching JSON. output R list correct types (integer, character, logical).","code":"# 1. Define the schema user_schema <- s_map(   id = s_integer(),   username = s_string(),   is_active = s_logical() )  # 2. Build the structure user_structure <- build_structure(user_schema) # `user_structure` is now ready for parsing  # 3. Prepare valid JSON valid_json <- '{   \"id\": 123,   \"username\": \"testuser\",   \"is_active\": true }'  # 4. Parse and validate parsed_data <- parse_json(valid_json, user_structure)  # Print the result print(parsed_data) #> $id #> [1] 123 #>  #> $username #> [1] \"testuser\" #>  #> $is_active #> [1] TRUE  # Check the structure of the parsed data str(parsed_data) #> List of 3 #>  $ id       : int 123 #>  $ username : chr \"testuser\" #>  $ is_active: logi TRUE"},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"example-2-nested-structures-and-optional-fields","dir":"Articles","previous_headings":"","what":"Example 2: Nested Structures and Optional Fields","title":"Getting Started with structr","text":"Structures can nested, fields can marked optional (meaning can accept null). Note s_optional() means value can null. default, s_map, key must still present JSON, even value null. key entirely missing, parse_json usually throw “missing field” error.","code":"# 1. Define a schema with nesting and an optional description product_schema <- s_map(   product_id = s_string(),   details = s_map(     name = s_string(),     price = s_double()   ),   tags = s_vector(s_string()),   description = s_optional(s_string()) # Can be string or null )  # 2. Build the structure product_structure <- build_structure(product_schema)  # 3. Parse JSON with the optional field present json_with_desc <- '{   \"product_id\": \"XYZ-123\",   \"details\": {\"name\": \"Gadget\", \"price\": 19.99},   \"tags\": [\"tech\", \"new\"],   \"description\": \"A useful gadget\" }' parsed1 <- parse_json(json_with_desc, product_structure) cat(\"Description when present:\\n\") #> Description when present: print(parsed1$description) #> [1] \"A useful gadget\"  # 4. Parse JSON where the optional field is null json_null_desc <- '{   \"product_id\": \"ABC-789\",   \"details\": {\"name\": \"Widget\", \"price\": 9.50},   \"tags\": [],   \"description\": null }' parsed2 <- parse_json(json_null_desc, product_structure) cat(\"\\nDescription when null:\\n\") #>  #> Description when null: print(parsed2$description) #> NULL"},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"handling-errors","dir":"Articles","previous_headings":"","what":"Handling Errors","title":"Getting Started with structr","text":"JSON doesn’t match structure, parse_json() throws informative error.","code":"# Use the simple user_structure from Example 1  # Error: Type mismatch (id should be integer, not string) json_type_error <- '{ \"id\": \"123\", \"username\": \"badtype\", \"is_active\": true }' try(parse_json(json_type_error, user_structure)) #> Error in parse_json(json_type_error, user_structure) :  #>   ExpectedSigned at character 0   # Error: Missing required field (username is missing) json_missing_field <- '{ \"id\": 456, \"is_active\": false }' try(parse_json(json_missing_field, user_structure)) #> Error in parse_json(json_missing_field, user_structure) :  #>   Serde(\"missing field `username`\") at character 0   # Error: Extra field (email is not defined in the schema) json_extra_field <- '{   \"id\": 789, \"username\": \"extra\", \"is_active\": true, \"email\": \"a@b.com\" }' try(parse_json(json_extra_field, user_structure)) #> Error in parse_json(json_extra_field, user_structure) :  #>   Serde(\"unknown field `email`, expected one of `id`, `is_active`, `username`\") at character 0  # Error: Invalid JSON syntax json_syntax_error <- '{ \"id\": 1 ' # Missing closing brace try(parse_json(json_syntax_error, user_structure)) #> Error in parse_json(json_syntax_error, user_structure) :  #>   Syntax at character 8 ('1')"},{"path":"https://ixpantia.github.io/structr/articles/getting_started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with structr","text":"vignette covered basic usage structr. details specific functions validation rules, consult help pages: ?parse_json ?build_structure ?s_map, ?s_vector, ?s_integer, ?s_double, ?s_string, ?s_logical, ?s_optional","code":""},{"path":"https://ixpantia.github.io/structr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"ixpantia, SRL. Copyright holder. Andres Quintero. Author, maintainer. authors dependency Rust crates. Contributor.           see inst/AUTHORS file details","code":""},{"path":"https://ixpantia.github.io/structr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Quintero (2025). structr: Strictly Typed JSON Parsing Validation. R package version 0.1.0.9000, https://github.com/ixpantia/structr.","code":"@Manual{,   title = {structr: Strictly Typed JSON Parsing and Validation},   author = {Andres Quintero},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/ixpantia/structr}, }"},{"path":[]},{"path":"https://ixpantia.github.io/structr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Strictly Typed JSON Parsing and Validation","text":"structr provides robust efficient way parse JSON data R strictly validating user-defined schema. ensures incoming JSON conforms expected structures (objects, arrays, nesting) also adheres specific data types (integer, double, string, logical, optional/nullable). core logic implemented Rust using highly performant serde simd_json crates (accessed via {extendr}), offering significant speed advantages traditional R methods, especially validation required.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Strictly Typed JSON Parsing and Validation","text":"Schema Definition: Define expected JSON structures using intuitive R functions (s_map, s_vector, s_integer, s_double, s_string, s_logical, s_optional). Strict Validation: Enforces type correctness, presence required fields, nesting, handles null values via s_optional. default, extra fields objects cause errors. High Performance: Faster base R jsonlite validated parsing, validation integrated Rust parsing process. Informative Errors: Provides detailed messages pinpointing location nature validation failures.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"missing--planned-features","dir":"","previous_headings":"","what":"Missing / Planned Features","title":"Strictly Typed JSON Parsing and Validation","text":"JSON Serialization (R object -> JSON string). Custom validation rules/functions. Built-support complex types (e.g., dates, enums).","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"performance-advantage","dir":"","previous_headings":"","what":"Performance Advantage","title":"Strictly Typed JSON Parsing and Validation","text":"Unlike jsonlite::fromJSON focuses flexible parsing, structr::parse_json simultaneously parses validates predefined structure. often results significantly faster execution times validation requirement, checks integrated high-performance Rust parsing layer (simd_json). avoids overhead parsing flexible R object validating separately.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Strictly Typed JSON Parsing and Validation","text":"Prerequisites: need Rust compiler (rustc) package manager (cargo) installed. easiest way via rustup: Install structr:","code":"# Install rustup (interactive installer) curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # Follow instructions. Ensure Rust >= 1.70 (check DESCRIPTION) # Requires 'remotes' package: install.packages(\"remotes\") remotes::install_github(\"ixpantia/structr\")  # Or, once on CRAN: # install.packages(\"structr\")"},{"path":"https://ixpantia.github.io/structr/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Strictly Typed JSON Parsing and Validation","text":"workflow involves three steps: Define Schema: Use s_* functions. Build Structure: Call build_structure() schema. Parse & Validate: Call parse_json() JSON string built structure.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"example-1-simple-object","dir":"","previous_headings":"Quick Start","what":"Example 1: Simple Object","title":"Strictly Typed JSON Parsing and Validation","text":"","code":"library(structr)  # 1. Define Schema user_schema <- s_map(   id = s_integer(),   username = s_string(),   is_active = s_logical() )  # 2. Build Structure user_structure <- build_structure(user_schema)  # 3. Parse Valid JSON valid_json <- '{\"id\": 123, \"username\": \"testuser\", \"is_active\": true}' parsed_data <- parse_json(valid_json, user_structure)  print(parsed_data) # Output: list(id = 123L, username = \"testuser\", is_active = TRUE) str(parsed_data) # Output: Shows correct R types (integer, character, logical)"},{"path":"https://ixpantia.github.io/structr/index.html","id":"example-2-nesting-and-optional-fields","dir":"","previous_headings":"Quick Start","what":"Example 2: Nesting and Optional Fields","title":"Strictly Typed JSON Parsing and Validation","text":"","code":"# 1. Define Schema product_schema <- s_map(   product_id = s_string(),   details = s_map(name = s_string(), price = s_double()),   description = s_optional(s_string()) # Can be string or null )  # 2. Build Structure product_structure <- build_structure(product_schema)  # 3. Parse JSON (description present) json_with_desc <- '{   \"product_id\": \"XYZ-123\",   \"details\": {\"name\": \"Gadget\", \"price\": 19.99},   \"description\": \"A useful gadget\" }' parsed1 <- parse_json(json_with_desc, product_structure) print(parsed1$description) # Output: [1] \"A useful gadget\"  # 4. Parse JSON (description is null) json_null_desc <- '{   \"product_id\": \"ABC-789\",   \"details\": {\"name\": \"Widget\", \"price\": 9.50},   \"description\": null }' parsed2 <- parse_json(json_null_desc, product_structure) print(parsed2$description) # Output: NULL"},{"path":"https://ixpantia.github.io/structr/index.html","id":"example-3-validation-error","dir":"","previous_headings":"Quick Start","what":"Example 3: Validation Error","title":"Strictly Typed JSON Parsing and Validation","text":"","code":"# Using user_structure from Example 1  # Type mismatch: id should be integer, not string json_type_error <- '{ \"id\": \"123\", \"username\": \"badtype\", \"is_active\": true }' try(parse_json(json_type_error, user_structure)) # Output: Error: invalid type: string \"123\", expected an integer at line 1 column 13  # Missing field: is_active is required json_missing_field <- '{ \"id\": 456, \"username\": \"incomplete\" }' try(parse_json(json_missing_field, user_structure)) # Output: Error: missing field `is_active`"},{"path":"https://ixpantia.github.io/structr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Strictly Typed JSON Parsing and Validation","text":"MIT License. See LICENSE file.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Strictly Typed JSON Parsing and Validation","text":"Bug reports contributions welcome! Please submit issues pull requests GitHub.","code":""},{"path":"https://ixpantia.github.io/structr/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Strictly Typed JSON Parsing and Validation","text":"Andres Quintero andres@ixpantia.com","code":""},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalize and Validate a Structure Definition — build_structure","title":"Finalize and Validate a Structure Definition — build_structure","text":"Processes structure definition created using s_* helper functions (like s_integer(), s_map(), s_vector()) final, validated representation required parse_json() function.","code":""},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalize and Validate a Structure Definition — build_structure","text":"","code":"build_structure(x)"},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finalize and Validate a Structure Definition — build_structure","text":"x structure definition created using s_* functions. defines expected schema JSON data (e.g., s_map(id = s_integer())).","code":""},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finalize and Validate a Structure Definition — build_structure","text":"object representing finalized structure definition. object specifically formatted use structure argument parse_json() function. internal details object typically needed user.","code":""},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finalize and Validate a Structure Definition — build_structure","text":"function serves two main purposes: Validation: checks user-provided structure definition correctness attempting parse JSON. includes verifying s_map() arguments correctly named use valid s_* definitions, s_vector() valid element_structure, nesting consistent. Errors definition (like duplicate field names s_map) caught stage. Preparation: converts user-friendly definition created s_* functions specific internal format required efficient JSON parsing engine used parse_json(). must call build_structure() schema definition passing parse_json().","code":""},{"path":"https://ixpantia.github.io/structr/reference/build_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finalize and Validate a Structure Definition — build_structure","text":"","code":"# 1. Define the desired JSON structure using s_* functions my_schema_definition <- s_map(   product_id = s_string(),   quantity = s_integer(),   in_stock = s_logical(),   attributes = s_vector(s_string()) )  # 2. Finalize and validate the definition finalized_structure <- build_structure(my_schema_definition) # finalized_structure is now ready to be used with parse_json()  # Example with nested structures complex_definition <- s_map(   order_id = s_integer(),   customer = s_map(     name = s_string(),     email = s_string()   ),   items = s_vector(     s_map(       sku = s_string(),       price = s_double()     )   ) )  validated_complex_structure <- build_structure(complex_definition)  # Use the built structure with parse_json (see ?parse_json examples) json_data <- '{   \"product_id\": \"XYZ-123\",   \"quantity\": 5,   \"in_stock\": true,   \"attributes\": [\"red\", \"large\"] }' parsed_data <- parse_json(json_data, structure = finalized_structure) print(parsed_data) #> $product_id #> [1] \"XYZ-123\" #>  #> $quantity #> [1] 5 #>  #> $in_stock #> [1] TRUE #>  #> $attributes #> [1] \"red\"   \"large\" #>"},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and Validate JSON Against a Structure — parse_json","title":"Parse and Validate JSON Against a Structure — parse_json","text":"Parses JSON string validates schema created build_structure(). Returns R object reflecting JSON content valid, throws detailed error.","code":""},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and Validate JSON Against a Structure — parse_json","text":"","code":"parse_json(json_string, structure)"},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and Validate JSON Against a Structure — parse_json","text":"json_string character string containing JSON input. structure structure definition created build_structure(), based s_* functions.","code":""},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and Validate JSON Against a Structure — parse_json","text":"parsed validated data R object: JSON objects → named lists JSON arrays → unnamed lists Strings, numbers, booleans → scalar R values (character, numeric, integer, logical) Errors raised invalid syntax, type mismatches, missing extra fields, duplicate keys, integer overflows.","code":""},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse and Validate JSON Against a Structure — parse_json","text":"Validation checks include: Types: JSON values must match declared structure (e.g., string vs integer). Required fields: fields s_map() must present. extra fields: Additional fields structure cause errors (unless .ignore_extra_fields = TRUE). Duplicate keys: Disallowed. Integer range: Must fit within R's 32-bit integer limits s_integer(). Homogeneous arrays: Elements s_vector() must match defined structure. Parsing powered serde_json Rust performance.","code":""},{"path":"https://ixpantia.github.io/structr/reference/parse_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse and Validate JSON Against a Structure — parse_json","text":"","code":"# Define and build a structure schema <- build_structure(s_map(   id = s_integer(),   username = s_string(),   is_active = s_logical(),   scores = s_vector(s_double()) ))  # Valid input json <- '{\"id\":1,\"username\":\"user\",\"is_active\":true,\"scores\":[9.5,8.0]}' parse_json(json, schema) #> $id #> [1] 1 #>  #> $username #> [1] \"user\" #>  #> $is_active #> [1] TRUE #>  #> $scores #> [1] 9.5 8.0 #>   # Common errors: # - Invalid JSON # - Wrong type (e.g., \"id\": \"abc\") # - Missing fields # - Unexpected extra fields # - Integer overflow # - Duplicate keys"},{"path":"https://ixpantia.github.io/structr/reference/s_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Map (Object) Structure — s_map","title":"Define a Map (Object) Structure — s_map","text":"Creates structure definition JSON object named fields. field must defined using s_* function (e.g., s_string(), s_integer(), nested structures).","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Map (Object) Structure — s_map","text":"","code":"s_map(..., .ignore_extra_fields = FALSE)"},{"path":"https://ixpantia.github.io/structr/reference/s_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Map (Object) Structure — s_map","text":"... Named field definitions. name corresponds key JSON object, value must structure created s_* function. Call s_map() arguments define empty object. .ignore_extra_fields Logical (default FALSE). TRUE, allows extra fields input JSON ignored instead triggering validation error.","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Map (Object) Structure — s_map","text":"intermediate structure definition used build_structure().","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Map (Object) Structure — s_map","text":"","code":"# Simple object s_map(name = s_string(), age = s_integer()) #> $type #> [1] \"map\" #>  #> $value #> $value$name #> $value$name$type #> [1] \"string\" #>  #>  #> $value$age #> $value$age$type #> [1] \"integer\" #>  #>  #>  #> $ignore_extra_fields #> [1] FALSE #>   # Nested structure s_map(   user = s_string(),   details = s_map(email = s_string(), active = s_logical()),   tags = s_vector(s_string()) ) #> $type #> [1] \"map\" #>  #> $value #> $value$user #> $value$user$type #> [1] \"string\" #>  #>  #> $value$details #> $value$details$type #> [1] \"map\" #>  #> $value$details$value #> $value$details$value$email #> $value$details$value$email$type #> [1] \"string\" #>  #>  #> $value$details$value$active #> $value$details$value$active$type #> [1] \"logical\" #>  #>  #>  #> $value$details$ignore_extra_fields #> [1] FALSE #>  #>  #> $value$tags #> $value$tags$type #> [1] \"vector\" #>  #> $value$tags$value #> $value$tags$value$type #> [1] \"string\" #>  #>  #>  #>  #> $ignore_extra_fields #> [1] FALSE #>   # Ignore extra JSON fields s_map(id = s_integer(), .ignore_extra_fields = TRUE) #> $type #> [1] \"map\" #>  #> $value #> $value$id #> $value$id$type #> [1] \"integer\" #>  #>  #>  #> $ignore_extra_fields #> [1] TRUE #>"},{"path":"https://ixpantia.github.io/structr/reference/s_optional.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an Optional (Nullable) Structure — s_optional","title":"Define an Optional (Nullable) Structure — s_optional","text":"Creates intermediate definition indicating JSON value can either conform specified structure_definition JSON null. typically used within s_map() define fields required non-null value.","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_optional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an Optional (Nullable) Structure — s_optional","text":"","code":"s_optional(structure_definition)"},{"path":"https://ixpantia.github.io/structr/reference/s_optional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an Optional (Nullable) Structure — s_optional","text":"structure_definition structure definition JSON value conform null. result another s_* function call (e.g., s_integer(), s_string(), s_map(...)).","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_optional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an Optional (Nullable) Structure — s_optional","text":"intermediate list representing optional structure definition.","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_optional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an Optional (Nullable) Structure — s_optional","text":"","code":"# Define a map where 'description' is optional (can be string or null) map_with_optional <- s_map(   id = s_integer(),   description = s_optional(s_string()) ) built_optional <- build_structure(map_with_optional) str(built_optional) #> Class 'Structure' <externalptr>  # Expected (simplified): # list(type = \"map\", #      value = list(id = list(type = \"integer\"), #                   description = list(type = \"optional\", #                                      value = list(type = \"string\"))), #      ...)  # Define a vector where elements can be integers or null vec_optional_elements <- s_vector(s_optional(s_integer())) build_structure(vec_optional_elements) #> <pointer: 0x5600ce26d250> #> attr(,\"class\") #> [1] \"Structure\" # Expected (simplified): # list(type = \"vector\", #      value = list(type = \"optional\", value = list(type = \"integer\")))  # --- Parsing Examples (see ?parse_json) ---  # Field present and valid json_present <- '{\"id\": 1, \"description\": \"A product\"}' parse_json(json_present, built_optional) #> $id #> [1] 1 #>  #> $description #> [1] \"A product\" #>  # Output: list(id = 1L, description = \"A product\")  # Optional field is null json_null <- '{\"id\": 2, \"description\": null}' parse_json(json_null, built_optional) #> $id #> [1] 2 #>  #> $description #> NULL #>  # Output: list(id = 2L, description = NULL)  # Optional field is missing (this causes an error by default with maps) # Note: Optionality here means \"can be null\", not \"can be absent\". # The 'missing field' error takes precedence unless the field is truly absent # from the structure definition itself (which isn't the case here). json_missing <- '{\"id\": 3}' try(parse_json(json_missing, built_optional)) #> $id #> [1] 3 #>  # Expected: Error about missing field \"description\"  # Parsing a vector with optional elements json_vec_opt <- '[10, null, 30, null]' parse_json(json_vec_opt, build_structure(vec_optional_elements)) #> [1] 10 NA 30 NA # Output: list(10L, NULL, 30L, NULL)"},{"path":"https://ixpantia.github.io/structr/reference/s_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Vector (Array) Structure — s_vector","title":"Define a Vector (Array) Structure — s_vector","text":"Creates intermediate definition JSON array elements must conform specified element_structure. definition used within s_map() finalized build_structure().","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Vector (Array) Structure — s_vector","text":"","code":"s_vector(element_structure)"},{"path":"https://ixpantia.github.io/structr/reference/s_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Vector (Array) Structure — s_vector","text":"element_structure structure definition elements within vector. result another s_* function call (e.g., s_integer(), s_map(id = s_integer())).","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Vector (Array) Structure — s_vector","text":"intermediate list representing vector structure definition.","code":""},{"path":"https://ixpantia.github.io/structr/reference/s_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Vector (Array) Structure — s_vector","text":"","code":"# Define a vector of strings vec_str_def <- s_vector(s_string()) build_structure(vec_str_def) #> <pointer: 0x5600c8990ee0> #> attr(,\"class\") #> [1] \"Structure\" # Expected: list(type = \"vector\", value = list(type = \"string\"))  # Define a vector of objects, each having an 'id' (integer) and 'name' (string) vec_obj_def <- s_vector(   s_map(id = s_integer(), name = s_string()) ) build_structure(vec_obj_def) #> <pointer: 0x5600d1d793e0> #> attr(,\"class\") #> [1] \"Structure\" # Expected: list(type = \"vector\", value = list(type = \"map\", #                   value = list(id = list(type = \"integer\"), #                                name = list(type = \"string\"))))  # Parsing example (see ?parse_json) json_data <- '[{\"id\": 1, \"name\": \"A\"}, {\"id\": 2, \"name\": \"B\"}]' parsed <- parse_json(json_data, build_structure(vec_obj_def)) print(parsed) # Will be a list of lists #> [[1]] #> [[1]]$id #> [1] 1 #>  #> [[1]]$name #> [1] \"A\" #>  #>  #> [[2]] #> [[2]]$id #> [1] 2 #>  #> [[2]]$name #> [1] \"B\" #>  #>"},{"path":"https://ixpantia.github.io/structr/reference/structure_atomics.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Atomic Structure Types — structure_atomics","title":"Define Atomic Structure Types — structure_atomics","text":"functions create intermediate definitions basic JSON atomic types (integer, number/double, string, boolean). definitions used within s_vector() s_map() finalized build_structure().","code":""},{"path":"https://ixpantia.github.io/structr/reference/structure_atomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Atomic Structure Types — structure_atomics","text":"","code":"s_integer()  s_double()  s_string()  s_logical()"},{"path":"https://ixpantia.github.io/structr/reference/structure_atomics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Atomic Structure Types — structure_atomics","text":"intermediate list representing atomic type definition (e.g., list(type = \"integer\")).","code":""},{"path":"https://ixpantia.github.io/structr/reference/structure_atomics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Atomic Structure Types — structure_atomics","text":"s_integer(): Expects JSON integer fits within R's 32-bit signed integer range. Allows JSON numbers without fractional parts (e.g., 123.0). s_double(): Expects JSON number (integer float). s_string(): Expects JSON string. s_logical(): Expects JSON boolean (true false).","code":""},{"path":"https://ixpantia.github.io/structr/reference/structure_atomics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Atomic Structure Types — structure_atomics","text":"","code":"build_structure(s_integer()) # list(type = \"integer\") #> <pointer: 0x5600cd970830> #> attr(,\"class\") #> [1] \"Structure\" build_structure(s_double())  # list(type = \"double\") #> <pointer: 0x5600d1578340> #> attr(,\"class\") #> [1] \"Structure\" build_structure(s_string())  # list(type = \"string\") #> <pointer: 0x5600cd2146c0> #> attr(,\"class\") #> [1] \"Structure\" build_structure(s_logical()) # list(type = \"logical\") #> <pointer: 0x5600cf8365c0> #> attr(,\"class\") #> [1] \"Structure\""}]
