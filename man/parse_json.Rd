% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_json.R
\name{parse_json}
\alias{parse_json}
\title{Parse and Validate JSON Against a Structure}
\usage{
parse_json(json_string, structure)
}
\arguments{
\item{json_string}{A character string containing the JSON input.}

\item{structure}{A structure definition created with \code{build_structure()}, based on \verb{s_*} functions.}
}
\value{
The parsed and validated data as an R object:
\itemize{
\item JSON objects → named \code{list}s
\item JSON arrays → unnamed \code{list}s
\item Strings, numbers, booleans → scalar R values (character, numeric, integer, logical)
}
Errors are raised for invalid syntax, type mismatches, missing or extra fields, duplicate keys,
and integer overflows.
}
\description{
Parses a JSON string and validates it against a schema created with \code{build_structure()}.
Returns an R object reflecting the JSON content if valid, or throws a detailed error.
}
\details{
Validation checks include:
\itemize{
\item \strong{Types}: JSON values must match the declared structure (e.g., string vs integer).
\item \strong{Required fields}: All fields in \code{s_map()} must be present.
\item \strong{No extra fields}: Additional fields not in the structure cause errors (unless \code{.ignore_extra_fields = TRUE}).
\item \strong{Duplicate keys}: Disallowed.
\item \strong{Integer range}: Must fit within R's 32-bit integer limits for \code{s_integer()}.
\item \strong{Homogeneous arrays}: Elements in \code{s_vector()} must match the defined structure.
}

Parsing is powered by \code{serde_json} in Rust for performance.
}
\examples{
# Define and build a structure
schema <- build_structure(s_map(
  id = s_integer(),
  username = s_string(),
  is_active = s_logical(),
  scores = s_vector(s_double())
))

# Valid input
json <- '{"id":1,"username":"user","is_active":true,"scores":[9.5,8.0]}'
parse_json(json, schema)

# Common errors:
# - Invalid JSON
# - Wrong type (e.g., "id": "abc")
# - Missing fields
# - Unexpected extra fields
# - Integer overflow
# - Duplicate keys
}
