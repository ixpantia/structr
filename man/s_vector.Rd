% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/structure.R
\name{s_vector}
\alias{s_vector}
\title{Define a Vector (Array) Structure}
\usage{
s_vector(element_structure)
}
\arguments{
\item{element_structure}{The structure definition for the elements within the
vector. This should be the result of another \verb{s_*} function call (e.g., \code{s_integer()},
\code{s_map(id = s_integer())}).}
}
\value{
An intermediate list representing the vector structure definition.
}
\description{
Creates an intermediate definition for a JSON array where all elements must conform
to the same specified \code{element_structure}. This definition is used within
\code{s_map()} or finalized by \code{build_structure()}.
}
\examples{
# Define a vector of strings
vec_str_def <- s_vector(s_string())
build_structure(vec_str_def)
# Expected: list(type = "vector", value = list(type = "string"))

# Define a vector of objects, each having an 'id' (integer) and 'name' (string)
vec_obj_def <- s_vector(
  s_map(id = s_integer(), name = s_string())
)
build_structure(vec_obj_def)
# Expected: list(type = "vector", value = list(type = "map",
#                   value = list(id = list(type = "integer"),
#                                name = list(type = "string"))))

# Parsing example (see ?parse_json)
json_data <- '[{"id": 1, "name": "A"}, {"id": 2, "name": "B"}]'
parsed <- parse_json(json_data, build_structure(vec_obj_def))
print(parsed) # Will be a list of lists
}
