% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/structure.R
\name{build_structure}
\alias{build_structure}
\title{Finalize and Validate a Structure Definition}
\usage{
build_structure(x)
}
\arguments{
\item{x}{The structure definition created using \verb{s_*} functions. This defines
the expected schema of the JSON data (e.g., \code{s_map(id = s_integer())}).}
}
\value{
An object representing the finalized structure definition. This object
is specifically formatted for use as the \code{structure} argument in the
\code{parse_json()} function. The internal details of this object are not typically
needed by the user.
}
\description{
Processes a structure definition created using the \verb{s_*} helper functions
(like \code{s_integer()}, \code{s_map()}, \code{s_vector()}) into a final, validated
representation required by the \code{parse_json()} function.
}
\details{
This function serves two main purposes:
\enumerate{
\item \strong{Validation}: It checks the user-provided structure definition for
correctness \emph{before} attempting to parse any JSON. This includes verifying
that \code{s_map()} arguments are correctly named and use valid \verb{s_*} definitions,
that \code{s_vector()} has a valid \code{element_structure}, and that nesting is
consistent. Errors in the definition (like duplicate field names in \code{s_map})
will be caught at this stage.
\item \strong{Preparation}: It converts the user-friendly definition created
with \verb{s_*} functions into the specific internal format required by the
efficient JSON parsing engine used in \code{parse_json()}.
}
You must call \code{build_structure()} on your schema definition before passing it
to \code{parse_json()}.
}
\examples{
# 1. Define the desired JSON structure using s_* functions
my_schema_definition <- s_map(
  product_id = s_string(),
  quantity = s_integer(),
  in_stock = s_logical(),
  attributes = s_vector(s_string())
)

# 2. Finalize and validate the definition
finalized_structure <- build_structure(my_schema_definition)
# finalized_structure is now ready to be used with parse_json()

# Example with nested structures
complex_definition <- s_map(
  order_id = s_integer(),
  customer = s_map(
    name = s_string(),
    email = s_string()
  ),
  items = s_vector(
    s_map(
      sku = s_string(),
      price = s_double()
    )
  )
)

validated_complex_structure <- build_structure(complex_definition)

# Example of an invalid definition caught by build_structure
invalid_definition <- s_map(
   name = s_string(),
   name = s_integer() # Duplicate field name
)
# This will throw an error when build_structure is called:
try(build_structure(invalid_definition))

# Another invalid example: missing element structure in s_vector
try(build_structure(s_vector()))

# Use the built structure with parse_json (see ?parse_json examples)
json_data <- '{
  "product_id": "XYZ-123",
  "quantity": 5,
  "in_stock": true,
  "attributes": ["red", "large"]
}'
parsed_data <- parse_json(json_data, structure = finalized_structure)
print(parsed_data)

}
